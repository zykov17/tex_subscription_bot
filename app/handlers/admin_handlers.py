from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from aiogram.filters import Command
from aiogram.exceptions import TelegramAPIError
import logging
from datetime import datetime

from config import config
from app.keyboards.inline_kb import create_admin_keyboard
from app.services.gift_service import get_all_recipients
from app.utils.misc import generate_csv_data
from app.models.database import db

logger = logging.getLogger(__name__)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã—Ö handlers
admin_router = Router()


# –§–∏–ª—å—Ç—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return config.ADMIN_ID and user_id == config.ADMIN_ID


@admin_router.message(Command("admin"))
async def cmd_admin(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /admin
    """
    if not is_admin(message.from_user.id):
        await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞ –∫ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏.")
        return
    
    await message.answer(
        "üë®‚Äçüíª –ü–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=create_admin_keyboard()
    )


@admin_router.callback_query(F.data == "admin_stats")
async def admin_stats_callback(callback: CallbackQuery):
    """
    –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ã–¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∞—Ä–∫–æ–≤
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        session = await db.get_session()
        try:
            users = await get_all_recipients(session)

            await callback.message.edit_text(
                f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–∞—Ä–∫–æ–≤:\n\n"
                f"‚Ä¢ –í—Å–µ–≥–æ –≤—ã–¥–∞–Ω–æ: {len(users)} –ø–æ–¥–∞—Ä–∫–æ–≤\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –≤—ã–¥–∞—á–∞: {users[0].created_at.strftime('%Y-%m-%d %H:%M') if users else 'N/A'}\n\n"
                "–î–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:",
                reply_markup=create_admin_keyboard()
            )
        finally:
            await session.close()

        await callback.answer()
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@admin_router.callback_query(F.data == "admin_export")
async def admin_export_callback(callback: CallbackQuery):
    """
    –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö –≤ CSV —Ñ–∞–π–ª
    """
    if not is_admin(callback.from_user.id):
        await callback.answer("‚õî –ù–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞")
        return
    
    try:
        session = await db.get_session()
        try:
            users = await get_all_recipients(session)

            if not users:
                await callback.message.answer("üì≠ –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
                await callback.answer()
                return

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º CSV –¥–∞–Ω–Ω—ã–µ
            csv_string_io = generate_csv_data(users)
            csv_content = csv_string_io.getvalue()

            # –°–æ–∑–¥–∞–µ–º BufferedInputFile –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ CSV
            csv_file = BufferedInputFile(
                file=csv_content.encode("utf-8"),
                filename=f"gift_recipients_{len(users)}_{datetime.now().strftime('%Y%m%d_%H%M%S')}.csv"
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
            await callback.message.answer_document(
                document=csv_file,
                caption=f"üìÅ –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö\n–í—ã–¥–∞–Ω–æ –ø–æ–¥–∞—Ä–∫–æ–≤: {len(users)}"
            )
        finally:
            await session.close()

        await callback.answer("‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã")
    
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
        await callback.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –¥–∞–Ω–Ω—ã—Ö")
